using System;
using Antlr4.Runtime;

namespace FStump
{
    public class FStumpCompiler
    {
        public const string G1 = "r1";
        public const string G2 = "r2";
        public const string G3 = "r3";
        public const string UNUSED = "r4";
        public const string SP = "r5";
        public const string SF = "r6";
        public const string PC = "r7";
        
        private StumpWriter Writer { get; set; }

        private StackFrame StackFrame { get; set; }
        
        public void Compile(string input, string output)
        {
            var lexer = new FStumpLexer(new AntlrFileStream(input));
            var tokens = new CommonTokenStream(lexer);
            var parser = new FStumpParser(tokens) {BuildParseTree = true};

            Writer = new StumpWriter();
            Writer.WriteComment("Autogenerated program using fstump");

            Writer.WriteBlankLine();
            Writer.WriteComment("Setup and jump");
            Writer.WriteMovImme(SP, "stack_start");
            Writer.WriteMovImme(SF, "stack_start");

            // Store pointer
            Writer.WriteMovImme(G1, "program_exit");
            Writer.WriteAddImme(SP, SP, "1");
            Writer.WriteStore(G1, SP);
            Writer.WriteAddImme(SP, SP, "1");

            Writer.WriteComment("Loop based noop exit");
            Writer.WriteLabel("program_exit");
            Writer.WriteNop();
            Writer.WriteBranch(StumpWriter.BranchCondition.Always, "program_exit");

            HandleEntry(parser.entry());

            Writer.WriteBlankLine();
            Writer.WriteComment("Stack");
            Writer.WriteLabel("stack_start");
            Writer.WriteData("0");

            Console.WriteLine();
            Console.WriteLine("-----------------------------");
            Writer.Print();
        }

        private void HandleEntry(FStumpParser.EntryContext context)
        {
            foreach (var functionContext in context.function())
            {
                HandleFunction(functionContext);
            }
        }

        private void HandleFunction(FStumpParser.FunctionContext context)
        {
            var functionName = context.identifier().GetText();

            Writer.WriteBlankLine();
            Writer.WriteComment($"Function start {functionName}");

            var oldWriter = Writer;
            
            Writer = new StumpWriter();
            StackFrame = new StackFrame();

            HandleBlock(context.block());

            StackFrame.WriteFrame(oldWriter);

            oldWriter.WriteComment("Function body");
            oldWriter.WriteWriter(Writer);
            Writer = oldWriter;
            
            Writer.WriteComment($"Function end {functionName}");
            Writer.WriteBlankLine();
        }

        private void HandleBlock(FStumpParser.BlockContext context)
        {
            foreach (var statement in context.statement())
            {
                switch (statement)
                {
//                    case FStumpParser.AddVariableStatementContext addVariableStatementContext:
//                        break;
                    case FStumpParser.AssignVariableDefStatementContext assignVariableDefStatementContext:
                    {
                        var type = ConvertType(assignVariableDefStatementContext.type());
                        var name = assignVariableDefStatementContext.identifier().GetText();
                        StackFrame.AddVariable(name, type);
                        
                        
                        break;
                    }
//                    case FStumpParser.BlockStatementContext blockStatementContext:
//                        break;
//                    case FStumpParser.EmptyVariableDefStatementContext emptyVariableDefStatementContext:
//                        break;
//                    case FStumpParser.RawAssignStatementContext rawAssignStatementContext:
//                        break;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(statement));
                }
            }
        }

        private void HandleExpression(FStumpParser.ExpressionContext context)
        {
//            context.()
        }

        private void HandleConditionalOrExpression(FStumpParser.ConditionalOrExpressionContext context)
        {
            switch (context)
            {
                case FStumpParser.BypassConditionalOrExpressionContext bypassConditionalOrExpressionContext:
                    HandleConditionalAndExpression(bypassConditionalOrExpressionContext.conditionalAndExpression());
                    break;
//                case FStumpParser.DefaultConditionalOrExpressionContext defaultConditionalOrExpressionContext:
//                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(context));
            }
        }

        private void HandleConditionalAndExpression(FStumpParser.ConditionalAndExpressionContext context)
        {
            switch (context)
            {
                case FStumpParser.BypassConditionalAndExpressionContext bypassConditionalAndExpressionContext:
                    HandleInclusiveOrExpression(bypassConditionalAndExpressionContext.inclusiveOrExpression());
                    break;
//                case FStumpParser.DefaultConditionalAndExpressionContext defaultConditionalAndExpressionContext:
//                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(context));
            }
        }

        private void HandleInclusiveOrExpression(FStumpParser.InclusiveOrExpressionContext context)
        {
            switch (context)
            {
                case FStumpParser.BypassInclusiveOrExpressionContext bypassInclusiveOrExpressionContext:
                    HandleExclusiveOrExpression(bypassInclusiveOrExpressionContext.exclusiveOrExpression());
                    break;
//                case FStumpParser.DefaultInclusiveOrExpressionContext defaultInclusiveOrExpressionContext:
//                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(context));
            }
        }

        private void HandleExclusiveOrExpression(FStumpParser.ExclusiveOrExpressionContext context)
        {
            switch (context)
            {
                case FStumpParser.BypassExclusiveOrExpressionContext bypassExclusiveOrExpressionContext:
                    HandleAndExpression(bypassExclusiveOrExpressionContext.andExpression());
                    break;
//                case FStumpParser.DefaultExclusiveOrExpressionContext defaultExclusiveOrExpressionContext:
//                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(context));
            }
        }

        private void HandleAndExpression(FStumpParser.AndExpressionContext context)
        {
            switch (context)
            {
                case FStumpParser.BypassAndExpressionContext bypassAndExpressionContext:
                    HandleEqualityExpression(bypassAndExpressionContext.equalityExpression());
                    break;
//                case FStumpParser.DefaultAndExpressionContext defaultAndExpressionContext:
//                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(context));
            }
        }

        private void HandleEqualityExpression(FStumpParser.EqualityExpressionContext context)
        {
            switch (context)
            {
                case FStumpParser.BypassEqualityExpressionContext bypassEqualityExpressionContext:
                    break;
//                case FStumpParser.EqualEqualityExpressionContext equalEqualityExpressionContext:
//                    break;
//                case FStumpParser.NotEqualEqualityExpressionContext notEqualEqualityExpressionContext:
//                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(context));
            }
        }

        private void HandleRelationalExpression(FStumpParser.RelationalExpressionContext context)
        {
            switch (context)
            {
                case FStumpParser.BypassRelationalExpressionContext bypassRelationalExpressionContext:
                    break;
//                case FStumpParser.GteRelationalExpressionContext gteRelationalExpressionContext:
//                    break;
//                case FStumpParser.GtRelationalExpressionContext gtRelationalExpressionContext:
//                    break;
//                case FStumpParser.LteRelationalExpressionContext lteRelationalExpressionContext:
//                    break;
//                case FStumpParser.LtRelationalExpressionContext ltRelationalExpressionContext:
//                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(context));
            }
        }
        
        private DataType ConvertType(FStumpParser.TypeContext context)
        {
            switch (context)
            {
                case FStumpParser.I16TypeContext i16TypeContext:
                    return new DataType(PrimitiveType.I16, 0);
                case FStumpParser.I32TypeContext i32TypeContext:
                    return new DataType(PrimitiveType.I32, 0);
                case FStumpParser.I8TypeContext i8TypeContext:
                    return new DataType(PrimitiveType.I8, 0);
                case FStumpParser.PtrTypeContext ptrTypeContext:
                    var innerType = ConvertType(ptrTypeContext.type());
                    return new DataType(innerType.PrimitiveType, innerType.PointerDepth + 1);
                case FStumpParser.VoidTypeContext voidTypeContext:
                    return new DataType(PrimitiveType.Void, 0);
                default:
                    throw new ArgumentOutOfRangeException(nameof(context));
            }
        }
    }
}