//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FStump.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FStumpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, FUNC=2, VOID=3, BOOL=4, I8=5, I16=6, I32=7, I64=8, I128=9, LPAREN=10, 
		RPAREN=11, LBRACE=12, RBRACE=13, LBRACK=14, RBRACK=15, SEMI=16, COMMA=17, 
		DOT=18, ASSIGN=19, GT=20, LT=21, BANG=22, TILDE=23, QUESTION=24, COLON=25, 
		EQUAL=26, LE=27, GE=28, NOTEQUAL=29, AND=30, OR=31, INC=32, DEC=33, ADD=34, 
		SUB=35, MUL=36, DIV=37, BITAND=38, BITOR=39, CARET=40, MOD=41, ADD_ASSIGN=42, 
		SUB_ASSIGN=43, MUL_ASSIGN=44, DIV_ASSIGN=45, AND_ASSIGN=46, OR_ASSIGN=47, 
		XOR_ASSIGN=48, MOD_ASSIGN=49, LSHIFT_ASSIGN=50, RSHIFT_ASSIGN=51, URSHIFT_ASSIGN=52, 
		IDENTIFIER=53, DECIMAL_LITERAL=54, HEX_LITERAL=55, OCT_LITERAL=56, BINARY_LITERAL=57, 
		BOOL_LITERAL=58, CHAR_LITERAL=59, STRING_LITERAL=60;
	public const int
		RULE_entry = 0, RULE_function = 1, RULE_function_args = 2, RULE_block = 3, 
		RULE_statement = 4, RULE_expression = 5, RULE_conditionalOrExpression = 6, 
		RULE_conditionalAndExpression = 7, RULE_inclusiveOrExpression = 8, RULE_exclusiveOrExpression = 9, 
		RULE_andExpression = 10, RULE_equalityExpression = 11, RULE_relationalExpression = 12, 
		RULE_shiftExpression = 13, RULE_additiveExpression = 14, RULE_multiplicativeExpression = 15, 
		RULE_castExpression = 16, RULE_unaryExpression = 17, RULE_baseExpression = 18, 
		RULE_function_arg = 19, RULE_type = 20, RULE_identifier = 21, RULE_number_literal = 22;
	public static readonly string[] ruleNames = {
		"entry", "function", "function_args", "block", "statement", "expression", 
		"conditionalOrExpression", "conditionalAndExpression", "inclusiveOrExpression", 
		"exclusiveOrExpression", "andExpression", "equalityExpression", "relationalExpression", 
		"shiftExpression", "additiveExpression", "multiplicativeExpression", "castExpression", 
		"unaryExpression", "baseExpression", "function_arg", "type", "identifier", 
		"number_literal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'func'", "'void'", "'bool'", "'i8'", "'i16'", "'i32'", "'i64'", 
		"'i128'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
		"'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", "'>='", 
		"'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", 
		"'|'", "'^'", "'%'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
		"'%='", "'<<='", "'>>='", "'>>>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "FUNC", "VOID", "BOOL", "I8", "I16", "I32", "I64", "I128", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
		"DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
		"LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
		"DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
		"MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
		"LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "IDENTIFIER", "DECIMAL_LITERAL", 
		"HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", "BOOL_LITERAL", "CHAR_LITERAL", 
		"STRING_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FStump.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FStumpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FStumpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FStumpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class EntryContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(FStumpParser.Eof, 0); }
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public EntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry; } }
	}

	[RuleVersion(0)]
	public EntryContext entry() {
		EntryContext _localctx = new EntryContext(Context, State);
		EnterRule(_localctx, 0, RULE_entry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FUNC) {
				{
				{
				State = 46; function();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public TypeContext return_type;
		public ITerminalNode FUNC() { return GetToken(FStumpParser.FUNC, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(FStumpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(FStumpParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Function_argsContext function_args() {
			return GetRuleContext<Function_argsContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(FUNC);
			State = 55; identifier();
			State = 56; Match(LPAREN);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << BOOL) | (1L << I16) | (1L << I32))) != 0)) {
				{
				State = 57; function_args();
				}
			}

			State = 60; Match(RPAREN);
			State = 61; _localctx.return_type = type(0);
			State = 62; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argsContext : ParserRuleContext {
		public Function_argContext[] function_arg() {
			return GetRuleContexts<Function_argContext>();
		}
		public Function_argContext function_arg(int i) {
			return GetRuleContext<Function_argContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FStumpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FStumpParser.COMMA, i);
		}
		public Function_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args; } }
	}

	[RuleVersion(0)]
	public Function_argsContext function_args() {
		Function_argsContext _localctx = new Function_argsContext(Context, State);
		EnterRule(_localctx, 4, RULE_function_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; function_arg();
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 65; Match(COMMA);
				State = 66; function_arg();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(FStumpParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(FStumpParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(LBRACE);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << BOOL) | (1L << I16) | (1L << I32) | (1L << LBRACE) | (1L << MUL) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 73; statement();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 79; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class AddVariableStatementContext : StatementContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ADD_ASSIGN() { return GetToken(FStumpParser.ADD_ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public AddVariableStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class RawAssignStatementContext : StatementContext {
		public ITerminalNode MUL() { return GetToken(FStumpParser.MUL, 0); }
		public ITerminalNode LPAREN() { return GetToken(FStumpParser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(FStumpParser.RPAREN, 0); }
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RawAssignStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class EmptyVariableDefStatementContext : StatementContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public EmptyVariableDefStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class AssignVariableDefStatementContext : StatementContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public AssignVariableDefStatementContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new EmptyVariableDefStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 81; type(0);
				State = 82; identifier();
				State = 83; Match(SEMI);
				}
				break;
			case 2:
				_localctx = new AssignVariableDefStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; type(0);
				State = 86; identifier();
				State = 87; Match(ASSIGN);
				State = 88; expression();
				State = 89; Match(SEMI);
				}
				break;
			case 3:
				_localctx = new AddVariableStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 91; identifier();
				State = 92; Match(ADD_ASSIGN);
				State = 93; expression();
				State = 94; Match(SEMI);
				}
				break;
			case 4:
				_localctx = new RawAssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 96; Match(MUL);
				State = 97; Match(LPAREN);
				State = 98; expression();
				State = 99; Match(RPAREN);
				State = 100; Match(ASSIGN);
				State = 101; expression();
				State = 102; Match(SEMI);
				}
				break;
			case 5:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 104; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; conditionalOrExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
	 
		public ConditionalOrExpressionContext() { }
		public virtual void CopyFrom(ConditionalOrExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BypassConditionalOrExpressionContext : ConditionalOrExpressionContext {
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public BypassConditionalOrExpressionContext(ConditionalOrExpressionContext context) { CopyFrom(context); }
	}
	public partial class DefaultConditionalOrExpressionContext : ConditionalOrExpressionContext {
		public ConditionalOrExpressionContext left;
		public ConditionalAndExpressionContext right;
		public ITerminalNode OR() { return GetToken(FStumpParser.OR, 0); }
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public DefaultConditionalOrExpressionContext(ConditionalOrExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BypassConditionalOrExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 110; conditionalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 117;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DefaultConditionalOrExpressionContext(new ConditionalOrExpressionContext(_parentctx, _parentState));
					((DefaultConditionalOrExpressionContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
					State = 112;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 113; Match(OR);
					State = 114; ((DefaultConditionalOrExpressionContext)_localctx).right = conditionalAndExpression(0);
					}
					} 
				}
				State = 119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
	 
		public ConditionalAndExpressionContext() { }
		public virtual void CopyFrom(ConditionalAndExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BypassConditionalAndExpressionContext : ConditionalAndExpressionContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public BypassConditionalAndExpressionContext(ConditionalAndExpressionContext context) { CopyFrom(context); }
	}
	public partial class DefaultConditionalAndExpressionContext : ConditionalAndExpressionContext {
		public ConditionalAndExpressionContext left;
		public InclusiveOrExpressionContext right;
		public ITerminalNode AND() { return GetToken(FStumpParser.AND, 0); }
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public DefaultConditionalAndExpressionContext(ConditionalAndExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BypassConditionalAndExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 121; inclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DefaultConditionalAndExpressionContext(new ConditionalAndExpressionContext(_parentctx, _parentState));
					((DefaultConditionalAndExpressionContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
					State = 123;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 124; Match(AND);
					State = 125; ((DefaultConditionalAndExpressionContext)_localctx).right = inclusiveOrExpression(0);
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
	 
		public InclusiveOrExpressionContext() { }
		public virtual void CopyFrom(InclusiveOrExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefaultInclusiveOrExpressionContext : InclusiveOrExpressionContext {
		public InclusiveOrExpressionContext left;
		public ExclusiveOrExpressionContext right;
		public ITerminalNode BITOR() { return GetToken(FStumpParser.BITOR, 0); }
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public DefaultInclusiveOrExpressionContext(InclusiveOrExpressionContext context) { CopyFrom(context); }
	}
	public partial class BypassInclusiveOrExpressionContext : InclusiveOrExpressionContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public BypassInclusiveOrExpressionContext(InclusiveOrExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BypassInclusiveOrExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 132; exclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DefaultInclusiveOrExpressionContext(new InclusiveOrExpressionContext(_parentctx, _parentState));
					((DefaultInclusiveOrExpressionContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 134;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 135; Match(BITOR);
					State = 136; ((DefaultInclusiveOrExpressionContext)_localctx).right = exclusiveOrExpression(0);
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
	 
		public ExclusiveOrExpressionContext() { }
		public virtual void CopyFrom(ExclusiveOrExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BypassExclusiveOrExpressionContext : ExclusiveOrExpressionContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public BypassExclusiveOrExpressionContext(ExclusiveOrExpressionContext context) { CopyFrom(context); }
	}
	public partial class DefaultExclusiveOrExpressionContext : ExclusiveOrExpressionContext {
		public ExclusiveOrExpressionContext left;
		public AndExpressionContext right;
		public ITerminalNode CARET() { return GetToken(FStumpParser.CARET, 0); }
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public DefaultExclusiveOrExpressionContext(ExclusiveOrExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BypassExclusiveOrExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 143; andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DefaultExclusiveOrExpressionContext(new ExclusiveOrExpressionContext(_parentctx, _parentState));
					((DefaultExclusiveOrExpressionContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 145;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 146; Match(CARET);
					State = 147; ((DefaultExclusiveOrExpressionContext)_localctx).right = andExpression(0);
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
	 
		public AndExpressionContext() { }
		public virtual void CopyFrom(AndExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BypassAndExpressionContext : AndExpressionContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public BypassAndExpressionContext(AndExpressionContext context) { CopyFrom(context); }
	}
	public partial class DefaultAndExpressionContext : AndExpressionContext {
		public AndExpressionContext left;
		public EqualityExpressionContext right;
		public ITerminalNode BITAND() { return GetToken(FStumpParser.BITAND, 0); }
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public DefaultAndExpressionContext(AndExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BypassAndExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 154; equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DefaultAndExpressionContext(new AndExpressionContext(_parentctx, _parentState));
					((DefaultAndExpressionContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 156;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 157; Match(BITAND);
					State = 158; ((DefaultAndExpressionContext)_localctx).right = equalityExpression(0);
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
	 
		public EqualityExpressionContext() { }
		public virtual void CopyFrom(EqualityExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualEqualityExpressionContext : EqualityExpressionContext {
		public EqualityExpressionContext left;
		public RelationalExpressionContext right;
		public ITerminalNode EQUAL() { return GetToken(FStumpParser.EQUAL, 0); }
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualEqualityExpressionContext(EqualityExpressionContext context) { CopyFrom(context); }
	}
	public partial class NotEqualEqualityExpressionContext : EqualityExpressionContext {
		public EqualityExpressionContext left;
		public RelationalExpressionContext right;
		public ITerminalNode NOTEQUAL() { return GetToken(FStumpParser.NOTEQUAL, 0); }
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public NotEqualEqualityExpressionContext(EqualityExpressionContext context) { CopyFrom(context); }
	}
	public partial class BypassEqualityExpressionContext : EqualityExpressionContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public BypassEqualityExpressionContext(EqualityExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BypassEqualityExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 165; relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 175;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 173;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new EqualEqualityExpressionContext(new EqualityExpressionContext(_parentctx, _parentState));
						((EqualEqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 167;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 168; Match(EQUAL);
						State = 169; ((EqualEqualityExpressionContext)_localctx).right = relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new NotEqualEqualityExpressionContext(new EqualityExpressionContext(_parentctx, _parentState));
						((NotEqualEqualityExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 170;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 171; Match(NOTEQUAL);
						State = 172; ((NotEqualEqualityExpressionContext)_localctx).right = relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
	 
		public RelationalExpressionContext() { }
		public virtual void CopyFrom(RelationalExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BypassRelationalExpressionContext : RelationalExpressionContext {
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public BypassRelationalExpressionContext(RelationalExpressionContext context) { CopyFrom(context); }
	}
	public partial class LteRelationalExpressionContext : RelationalExpressionContext {
		public RelationalExpressionContext left;
		public ShiftExpressionContext right;
		public ITerminalNode LE() { return GetToken(FStumpParser.LE, 0); }
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public LteRelationalExpressionContext(RelationalExpressionContext context) { CopyFrom(context); }
	}
	public partial class GteRelationalExpressionContext : RelationalExpressionContext {
		public RelationalExpressionContext left;
		public ShiftExpressionContext right;
		public ITerminalNode GE() { return GetToken(FStumpParser.GE, 0); }
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public GteRelationalExpressionContext(RelationalExpressionContext context) { CopyFrom(context); }
	}
	public partial class GtRelationalExpressionContext : RelationalExpressionContext {
		public RelationalExpressionContext left;
		public ShiftExpressionContext right;
		public ITerminalNode GT() { return GetToken(FStumpParser.GT, 0); }
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public GtRelationalExpressionContext(RelationalExpressionContext context) { CopyFrom(context); }
	}
	public partial class LtRelationalExpressionContext : RelationalExpressionContext {
		public RelationalExpressionContext left;
		public ShiftExpressionContext right;
		public ITerminalNode LT() { return GetToken(FStumpParser.LT, 0); }
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public LtRelationalExpressionContext(RelationalExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BypassRelationalExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 179; shiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 195;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 193;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new LtRelationalExpressionContext(new RelationalExpressionContext(_parentctx, _parentState));
						((LtRelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 181;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 182; Match(LT);
						State = 183; ((LtRelationalExpressionContext)_localctx).right = shiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new GtRelationalExpressionContext(new RelationalExpressionContext(_parentctx, _parentState));
						((GtRelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 184;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 185; Match(GT);
						State = 186; ((GtRelationalExpressionContext)_localctx).right = shiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new LteRelationalExpressionContext(new RelationalExpressionContext(_parentctx, _parentState));
						((LteRelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 187;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 188; Match(LE);
						State = 189; ((LteRelationalExpressionContext)_localctx).right = shiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new GteRelationalExpressionContext(new RelationalExpressionContext(_parentctx, _parentState));
						((GteRelationalExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 190;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 191; Match(GE);
						State = 192; ((GteRelationalExpressionContext)_localctx).right = shiftExpression(0);
						}
						break;
					}
					} 
				}
				State = 197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
	 
		public ShiftExpressionContext() { }
		public virtual void CopyFrom(ShiftExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LeftShiftExpressionContext : ShiftExpressionContext {
		public ShiftExpressionContext left;
		public AdditiveExpressionContext right;
		public ITerminalNode[] LT() { return GetTokens(FStumpParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(FStumpParser.LT, i);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public LeftShiftExpressionContext(ShiftExpressionContext context) { CopyFrom(context); }
	}
	public partial class BypassShiftExpressionContext : ShiftExpressionContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public BypassShiftExpressionContext(ShiftExpressionContext context) { CopyFrom(context); }
	}
	public partial class SpecialRightShiftExpressionContext : ShiftExpressionContext {
		public ShiftExpressionContext left;
		public AdditiveExpressionContext right;
		public ITerminalNode[] GT() { return GetTokens(FStumpParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(FStumpParser.GT, i);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public SpecialRightShiftExpressionContext(ShiftExpressionContext context) { CopyFrom(context); }
	}
	public partial class RightShiftExpressionContext : ShiftExpressionContext {
		public ShiftExpressionContext left;
		public AdditiveExpressionContext right;
		public ITerminalNode[] GT() { return GetTokens(FStumpParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(FStumpParser.GT, i);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public RightShiftExpressionContext(ShiftExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BypassShiftExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 199; additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 214;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new LeftShiftExpressionContext(new ShiftExpressionContext(_parentctx, _parentState));
						((LeftShiftExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 201;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 202; Match(LT);
						State = 203; Match(LT);
						State = 204; ((LeftShiftExpressionContext)_localctx).right = additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RightShiftExpressionContext(new ShiftExpressionContext(_parentctx, _parentState));
						((RightShiftExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 205;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 206; Match(GT);
						State = 207; Match(GT);
						State = 208; ((RightShiftExpressionContext)_localctx).right = additiveExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new SpecialRightShiftExpressionContext(new ShiftExpressionContext(_parentctx, _parentState));
						((SpecialRightShiftExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 209;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 210; Match(GT);
						State = 211; Match(GT);
						State = 212; Match(GT);
						State = 213; ((SpecialRightShiftExpressionContext)_localctx).right = additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
	 
		public AdditiveExpressionContext() { }
		public virtual void CopyFrom(AdditiveExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddAdditiveExpressionContext : AdditiveExpressionContext {
		public AdditiveExpressionContext left;
		public MultiplicativeExpressionContext right;
		public ITerminalNode ADD() { return GetToken(FStumpParser.ADD, 0); }
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AddAdditiveExpressionContext(AdditiveExpressionContext context) { CopyFrom(context); }
	}
	public partial class BypassAdditiveExpressionContext : AdditiveExpressionContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public BypassAdditiveExpressionContext(AdditiveExpressionContext context) { CopyFrom(context); }
	}
	public partial class SubtractAdditiveExpressionContext : AdditiveExpressionContext {
		public AdditiveExpressionContext left;
		public MultiplicativeExpressionContext right;
		public ITerminalNode SUB() { return GetToken(FStumpParser.SUB, 0); }
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public SubtractAdditiveExpressionContext(AdditiveExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BypassAdditiveExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 220; multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 230;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 228;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new AddAdditiveExpressionContext(new AdditiveExpressionContext(_parentctx, _parentState));
						((AddAdditiveExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 222;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 223; Match(ADD);
						State = 224; ((AddAdditiveExpressionContext)_localctx).right = multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new SubtractAdditiveExpressionContext(new AdditiveExpressionContext(_parentctx, _parentState));
						((SubtractAdditiveExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 225;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 226; Match(SUB);
						State = 227; ((SubtractAdditiveExpressionContext)_localctx).right = multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
	 
		public MultiplicativeExpressionContext() { }
		public virtual void CopyFrom(MultiplicativeExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ModMultiplicativeExpressionContext : MultiplicativeExpressionContext {
		public MultiplicativeExpressionContext left;
		public CastExpressionContext right;
		public ITerminalNode MOD() { return GetToken(FStumpParser.MOD, 0); }
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public ModMultiplicativeExpressionContext(MultiplicativeExpressionContext context) { CopyFrom(context); }
	}
	public partial class BypassMultiplicativeExpressionContext : MultiplicativeExpressionContext {
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public BypassMultiplicativeExpressionContext(MultiplicativeExpressionContext context) { CopyFrom(context); }
	}
	public partial class DivMultiplicativeExpressionContext : MultiplicativeExpressionContext {
		public MultiplicativeExpressionContext left;
		public CastExpressionContext right;
		public ITerminalNode DIV() { return GetToken(FStumpParser.DIV, 0); }
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public DivMultiplicativeExpressionContext(MultiplicativeExpressionContext context) { CopyFrom(context); }
	}
	public partial class MultMultiplicativeExpressionContext : MultiplicativeExpressionContext {
		public MultiplicativeExpressionContext left;
		public CastExpressionContext right;
		public ITerminalNode MUL() { return GetToken(FStumpParser.MUL, 0); }
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public MultMultiplicativeExpressionContext(MultiplicativeExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new BypassMultiplicativeExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 234; castExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 247;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 245;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new MultMultiplicativeExpressionContext(new MultiplicativeExpressionContext(_parentctx, _parentState));
						((MultMultiplicativeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 236;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 237; Match(MUL);
						State = 238; ((MultMultiplicativeExpressionContext)_localctx).right = castExpression();
						}
						break;
					case 2:
						{
						_localctx = new DivMultiplicativeExpressionContext(new MultiplicativeExpressionContext(_parentctx, _parentState));
						((DivMultiplicativeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 239;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 240; Match(DIV);
						State = 241; ((DivMultiplicativeExpressionContext)_localctx).right = castExpression();
						}
						break;
					case 3:
						{
						_localctx = new ModMultiplicativeExpressionContext(new MultiplicativeExpressionContext(_parentctx, _parentState));
						((ModMultiplicativeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 242;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 243; Match(MOD);
						State = 244; ((ModMultiplicativeExpressionContext)_localctx).right = castExpression();
						}
						break;
					}
					} 
				}
				State = 249;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
	 
		public CastExpressionContext() { }
		public virtual void CopyFrom(CastExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefaultCastExpressionContext : CastExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(FStumpParser.LPAREN, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(FStumpParser.RPAREN, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public DefaultCastExpressionContext(CastExpressionContext context) { CopyFrom(context); }
	}
	public partial class BypassCastExpressionContext : CastExpressionContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public BypassCastExpressionContext(CastExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_castExpression);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new BypassCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; unaryExpression();
				}
				break;
			case 2:
				_localctx = new DefaultCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 251; Match(LPAREN);
				State = 252; type(0);
				State = 253; Match(RPAREN);
				State = 254; unaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
	 
		public UnaryExpressionContext() { }
		public virtual void CopyFrom(UnaryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotUnaryExpressionContext : UnaryExpressionContext {
		public ITerminalNode BANG() { return GetToken(FStumpParser.BANG, 0); }
		public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		public NotUnaryExpressionContext(UnaryExpressionContext context) { CopyFrom(context); }
	}
	public partial class BypassUnaryExpressionContext : UnaryExpressionContext {
		public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		public BypassUnaryExpressionContext(UnaryExpressionContext context) { CopyFrom(context); }
	}
	public partial class NegateUnaryExpressionContext : UnaryExpressionContext {
		public ITerminalNode SUB() { return GetToken(FStumpParser.SUB, 0); }
		public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		public NegateUnaryExpressionContext(UnaryExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_unaryExpression);
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case INC:
			case DEC:
			case IDENTIFIER:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
				_localctx = new BypassUnaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; baseExpression();
				}
				break;
			case SUB:
				_localctx = new NegateUnaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; Match(SUB);
				State = 260; baseExpression();
				}
				break;
			case BANG:
				_localctx = new NotUnaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 261; Match(BANG);
				State = 262; baseExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseExpressionContext : ParserRuleContext {
		public BaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseExpression; } }
	 
		public BaseExpressionContext() { }
		public virtual void CopyFrom(BaseExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreDecBaseExpressionContext : BaseExpressionContext {
		public ITerminalNode DEC() { return GetToken(FStumpParser.DEC, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PreDecBaseExpressionContext(BaseExpressionContext context) { CopyFrom(context); }
	}
	public partial class PostDecBaseExpressionContext : BaseExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode DEC() { return GetToken(FStumpParser.DEC, 0); }
		public PostDecBaseExpressionContext(BaseExpressionContext context) { CopyFrom(context); }
	}
	public partial class NumberBaseExpressionContext : BaseExpressionContext {
		public Number_literalContext number_literal() {
			return GetRuleContext<Number_literalContext>(0);
		}
		public NumberBaseExpressionContext(BaseExpressionContext context) { CopyFrom(context); }
	}
	public partial class VariableBaseExpressionContext : BaseExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableBaseExpressionContext(BaseExpressionContext context) { CopyFrom(context); }
	}
	public partial class PostIncBaseExpressionContext : BaseExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode INC() { return GetToken(FStumpParser.INC, 0); }
		public PostIncBaseExpressionContext(BaseExpressionContext context) { CopyFrom(context); }
	}
	public partial class SubExpressionBaseExpressionContext : BaseExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(FStumpParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(FStumpParser.RPAREN, 0); }
		public SubExpressionBaseExpressionContext(BaseExpressionContext context) { CopyFrom(context); }
	}
	public partial class PreIncBaseExpressionContext : BaseExpressionContext {
		public ITerminalNode INC() { return GetToken(FStumpParser.INC, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PreIncBaseExpressionContext(BaseExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public BaseExpressionContext baseExpression() {
		BaseExpressionContext _localctx = new BaseExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_baseExpression);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new NumberBaseExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; number_literal();
				}
				break;
			case 2:
				_localctx = new SubExpressionBaseExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; Match(LPAREN);
				State = 267; expression();
				State = 268; Match(RPAREN);
				}
				break;
			case 3:
				_localctx = new VariableBaseExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 270; identifier();
				}
				break;
			case 4:
				_localctx = new PreDecBaseExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 271; Match(DEC);
				State = 272; identifier();
				}
				break;
			case 5:
				_localctx = new PreIncBaseExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 273; Match(INC);
				State = 274; identifier();
				}
				break;
			case 6:
				_localctx = new PostDecBaseExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 275; identifier();
				State = 276; Match(DEC);
				}
				break;
			case 7:
				_localctx = new PostIncBaseExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 278; identifier();
				State = 279; Match(INC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Function_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arg; } }
	}

	[RuleVersion(0)]
	public Function_argContext function_arg() {
		Function_argContext _localctx = new Function_argContext(Context, State);
		EnterRule(_localctx, 38, RULE_function_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; type(0);
			State = 284; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PtrTypeContext : TypeContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(FStumpParser.MUL, 0); }
		public PtrTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class I16TypeContext : TypeContext {
		public ITerminalNode I16() { return GetToken(FStumpParser.I16, 0); }
		public I16TypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class VoidTypeContext : TypeContext {
		public ITerminalNode VOID() { return GetToken(FStumpParser.VOID, 0); }
		public VoidTypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class I32TypeContext : TypeContext {
		public ITerminalNode I32() { return GetToken(FStumpParser.I32, 0); }
		public I32TypeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class BoolTypeContext : TypeContext {
		public ITerminalNode BOOL() { return GetToken(FStumpParser.BOOL, 0); }
		public BoolTypeContext(TypeContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
				{
				_localctx = new VoidTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 287; Match(VOID);
				}
				break;
			case BOOL:
				{
				_localctx = new BoolTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 288; Match(BOOL);
				}
				break;
			case I16:
				{
				_localctx = new I16TypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 289; Match(I16);
				}
				break;
			case I32:
				{
				_localctx = new I32TypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 290; Match(I32);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 297;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PtrTypeContext(new TypeContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 293;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 294; Match(MUL);
					}
					} 
				}
				State = 299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FStumpParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_literalContext : ParserRuleContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(FStumpParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(FStumpParser.HEX_LITERAL, 0); }
		public ITerminalNode OCT_LITERAL() { return GetToken(FStumpParser.OCT_LITERAL, 0); }
		public ITerminalNode BINARY_LITERAL() { return GetToken(FStumpParser.BINARY_LITERAL, 0); }
		public Number_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_literal; } }
	}

	[RuleVersion(0)]
	public Number_literalContext number_literal() {
		Number_literalContext _localctx = new Number_literalContext(Context, State);
		EnterRule(_localctx, 44, RULE_number_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);
		case 7: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);
		case 8: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);
		case 9: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);
		case 10: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 11: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 12: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 13: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);
		case 14: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 15: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 20: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 2);
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 1);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '>', '\x133', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\a', '\x2', '\x32', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x35', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '=', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x46', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', 'I', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'M', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'P', '\v', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'l', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', 'v', '\n', '\b', '\f', '\b', '\xE', '\b', 'y', '\v', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', '\x81', '\n', '\t', '\f', '\t', '\xE', '\t', '\x84', 
		'\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x8C', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\x8F', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x97', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\x9A', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xA2', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\xA5', '\v', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\xB0', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\xB3', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xC4', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\xC7', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xD9', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xDC', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xE7', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\xEA', '\v', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\xF8', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\xFB', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x103', '\n', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x10A', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x11C', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x126', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', 
		'\x12A', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x12D', '\v', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x2', '\r', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '*', '\x19', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x2', '\x3', '\x3', '\x2', '\x38', ';', 
		'\x2', '\x143', '\x2', '\x33', '\x3', '\x2', '\x2', '\x2', '\x4', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'J', '\x3', '\x2', '\x2', '\x2', '\n', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'm', '\x3', '\x2', '\x2', '\x2', '\xE', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'z', '\x3', '\x2', '\x2', '\x2', '\x12', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xEB', '\x3', '\x2', '\x2', '\x2', '\"', '\x102', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x109', '\x3', '\x2', '\x2', '\x2', '&', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x125', '\x3', '\x2', '\x2', '\x2', ',', '\x12E', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x130', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', 
		'\x5', '\x4', '\x3', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\a', '\x2', '\x2', '\x3', '\x37', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x39', '\a', '\x4', '\x2', '\x2', '\x39', ':', 
		'\x5', ',', '\x17', '\x2', ':', '<', '\a', '\f', '\x2', '\x2', ';', '=', 
		'\x5', '\x6', '\x4', '\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\a', '\r', '\x2', '\x2', '?', '@', '\x5', '*', '\x16', '\x2', 
		'@', '\x41', '\x5', '\b', '\x5', '\x2', '\x41', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x42', 'G', '\x5', '(', '\x15', '\x2', '\x43', '\x44', '\a', '\x13', 
		'\x2', '\x2', '\x44', '\x46', '\x5', '(', '\x15', '\x2', '\x45', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 
		'H', '\a', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'N', '\a', '\xE', '\x2', '\x2', 'K', 'M', '\x5', '\n', '\x6', 
		'\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\a', '\xF', '\x2', '\x2', 'R', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x5', '*', '\x16', '\x2', 'T', 'U', '\x5', ',', '\x17', 
		'\x2', 'U', 'V', '\a', '\x12', '\x2', '\x2', 'V', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x5', '*', '\x16', '\x2', 'X', 'Y', '\x5', ',', '\x17', 
		'\x2', 'Y', 'Z', '\a', '\x15', '\x2', '\x2', 'Z', '[', '\x5', '\f', '\a', 
		'\x2', '[', '\\', '\a', '\x12', '\x2', '\x2', '\\', 'l', '\x3', '\x2', 
		'\x2', '\x2', ']', '^', '\x5', ',', '\x17', '\x2', '^', '_', '\a', ',', 
		'\x2', '\x2', '_', '`', '\x5', '\f', '\a', '\x2', '`', '\x61', '\a', '\x12', 
		'\x2', '\x2', '\x61', 'l', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\a', '&', '\x2', '\x2', '\x63', '\x64', '\a', '\f', '\x2', '\x2', '\x64', 
		'\x65', '\x5', '\f', '\a', '\x2', '\x65', '\x66', '\a', '\r', '\x2', '\x2', 
		'\x66', 'g', '\a', '\x15', '\x2', '\x2', 'g', 'h', '\x5', '\f', '\a', 
		'\x2', 'h', 'i', '\a', '\x12', '\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'l', '\x5', '\b', '\x5', '\x2', 'k', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'W', '\x3', '\x2', '\x2', '\x2', 'k', ']', '\x3', '\x2', '\x2', 
		'\x2', 'k', '\x62', '\x3', '\x2', '\x2', '\x2', 'k', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\v', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x5', 
		'\xE', '\b', '\x2', 'n', '\r', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\b', 
		'\b', '\x1', '\x2', 'p', 'q', '\x5', '\x10', '\t', '\x2', 'q', 'w', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\f', '\x3', '\x2', '\x2', 's', 't', '\a', 
		'!', '\x2', '\x2', 't', 'v', '\x5', '\x10', '\t', '\x2', 'u', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'y', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'z', 
		'{', '\b', '\t', '\x1', '\x2', '{', '|', '\x5', '\x12', '\n', '\x2', '|', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '}', '~', '\f', '\x3', '\x2', '\x2', 
		'~', '\x7F', '\a', ' ', '\x2', '\x2', '\x7F', '\x81', '\x5', '\x12', '\n', 
		'\x2', '\x80', '}', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\b', 
		'\n', '\x1', '\x2', '\x86', '\x87', '\x5', '\x14', '\v', '\x2', '\x87', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\f', '\x3', '\x2', 
		'\x2', '\x89', '\x8A', '\a', ')', '\x2', '\x2', '\x8A', '\x8C', '\x5', 
		'\x14', '\v', '\x2', '\x8B', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\b', '\v', '\x1', '\x2', '\x91', '\x92', '\x5', '\x16', '\f', 
		'\x2', '\x92', '\x98', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\f', 
		'\x3', '\x2', '\x2', '\x94', '\x95', '\a', '*', '\x2', '\x2', '\x95', 
		'\x97', '\x5', '\x16', '\f', '\x2', '\x96', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\b', '\f', '\x1', '\x2', '\x9C', '\x9D', '\x5', 
		'\x18', '\r', '\x2', '\x9D', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9F', '\f', '\x3', '\x2', '\x2', '\x9F', '\xA0', '\a', '(', '\x2', '\x2', 
		'\xA0', '\xA2', '\x5', '\x18', '\r', '\x2', '\xA1', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA7', '\b', '\r', '\x1', '\x2', '\xA7', '\xA8', 
		'\x5', '\x1A', '\xE', '\x2', '\xA8', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xAA', '\f', '\x4', '\x2', '\x2', '\xAA', '\xAB', '\a', '\x1C', 
		'\x2', '\x2', '\xAB', '\xB0', '\x5', '\x1A', '\xE', '\x2', '\xAC', '\xAD', 
		'\f', '\x3', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x1F', '\x2', '\x2', 
		'\xAE', '\xB0', '\x5', '\x1A', '\xE', '\x2', '\xAF', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', 
		'\b', '\xE', '\x1', '\x2', '\xB5', '\xB6', '\x5', '\x1C', '\xF', '\x2', 
		'\xB6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\f', '\x6', 
		'\x2', '\x2', '\xB8', '\xB9', '\a', '\x17', '\x2', '\x2', '\xB9', '\xC4', 
		'\x5', '\x1C', '\xF', '\x2', '\xBA', '\xBB', '\f', '\x5', '\x2', '\x2', 
		'\xBB', '\xBC', '\a', '\x16', '\x2', '\x2', '\xBC', '\xC4', '\x5', '\x1C', 
		'\xF', '\x2', '\xBD', '\xBE', '\f', '\x4', '\x2', '\x2', '\xBE', '\xBF', 
		'\a', '\x1D', '\x2', '\x2', '\xBF', '\xC4', '\x5', '\x1C', '\xF', '\x2', 
		'\xC0', '\xC1', '\f', '\x3', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x1E', 
		'\x2', '\x2', '\xC2', '\xC4', '\x5', '\x1C', '\xF', '\x2', '\xC3', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC9', '\b', '\xF', '\x1', '\x2', '\xC9', '\xCA', 
		'\x5', '\x1E', '\x10', '\x2', '\xCA', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xCC', '\f', '\x5', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x17', 
		'\x2', '\x2', '\xCD', '\xCE', '\a', '\x17', '\x2', '\x2', '\xCE', '\xD9', 
		'\x5', '\x1E', '\x10', '\x2', '\xCF', '\xD0', '\f', '\x4', '\x2', '\x2', 
		'\xD0', '\xD1', '\a', '\x16', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x16', 
		'\x2', '\x2', '\xD2', '\xD9', '\x5', '\x1E', '\x10', '\x2', '\xD3', '\xD4', 
		'\f', '\x3', '\x2', '\x2', '\xD4', '\xD5', '\a', '\x16', '\x2', '\x2', 
		'\xD5', '\xD6', '\a', '\x16', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x16', 
		'\x2', '\x2', '\xD7', '\xD9', '\x5', '\x1E', '\x10', '\x2', '\xD8', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\b', '\x10', 
		'\x1', '\x2', '\xDE', '\xDF', '\x5', ' ', '\x11', '\x2', '\xDF', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\f', '\x4', '\x2', '\x2', 
		'\xE1', '\xE2', '\a', '$', '\x2', '\x2', '\xE2', '\xE7', '\x5', ' ', '\x11', 
		'\x2', '\xE3', '\xE4', '\f', '\x3', '\x2', '\x2', '\xE4', '\xE5', '\a', 
		'%', '\x2', '\x2', '\xE5', '\xE7', '\x5', ' ', '\x11', '\x2', '\xE6', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEC', '\b', '\x11', '\x1', '\x2', '\xEC', '\xED', '\x5', 
		'\"', '\x12', '\x2', '\xED', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEF', '\f', '\x5', '\x2', '\x2', '\xEF', '\xF0', '\a', '&', '\x2', '\x2', 
		'\xF0', '\xF8', '\x5', '\"', '\x12', '\x2', '\xF1', '\xF2', '\f', '\x4', 
		'\x2', '\x2', '\xF2', '\xF3', '\a', '\'', '\x2', '\x2', '\xF3', '\xF8', 
		'\x5', '\"', '\x12', '\x2', '\xF4', '\xF5', '\f', '\x3', '\x2', '\x2', 
		'\xF5', '\xF6', '\a', '+', '\x2', '\x2', '\xF6', '\xF8', '\x5', '\"', 
		'\x12', '\x2', '\xF7', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '!', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\x103', '\x5', '$', '\x13', '\x2', '\xFD', '\xFE', '\a', '\f', 
		'\x2', '\x2', '\xFE', '\xFF', '\x5', '*', '\x16', '\x2', '\xFF', '\x100', 
		'\a', '\r', '\x2', '\x2', '\x100', '\x101', '\x5', '$', '\x13', '\x2', 
		'\x101', '\x103', '\x3', '\x2', '\x2', '\x2', '\x102', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x104', '\x10A', '\x5', '&', '\x14', 
		'\x2', '\x105', '\x106', '\a', '%', '\x2', '\x2', '\x106', '\x10A', '\x5', 
		'&', '\x14', '\x2', '\x107', '\x108', '\a', '\x18', '\x2', '\x2', '\x108', 
		'\x10A', '\x5', '&', '\x14', '\x2', '\x109', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x105', '\x3', '\x2', '\x2', '\x2', '\x109', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x11C', '\x5', '.', '\x18', '\x2', '\x10C', '\x10D', '\a', '\f', 
		'\x2', '\x2', '\x10D', '\x10E', '\x5', '\f', '\a', '\x2', '\x10E', '\x10F', 
		'\a', '\r', '\x2', '\x2', '\x10F', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x11C', '\x5', ',', '\x17', '\x2', '\x111', '\x112', '\a', '#', 
		'\x2', '\x2', '\x112', '\x11C', '\x5', ',', '\x17', '\x2', '\x113', '\x114', 
		'\a', '\"', '\x2', '\x2', '\x114', '\x11C', '\x5', ',', '\x17', '\x2', 
		'\x115', '\x116', '\x5', ',', '\x17', '\x2', '\x116', '\x117', '\a', '#', 
		'\x2', '\x2', '\x117', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\x5', ',', '\x17', '\x2', '\x119', '\x11A', '\a', '\"', '\x2', '\x2', 
		'\x11A', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x113', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\'', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\x5', '*', 
		'\x16', '\x2', '\x11E', '\x11F', '\x5', ',', '\x17', '\x2', '\x11F', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\b', '\x16', '\x1', '\x2', 
		'\x121', '\x126', '\a', '\x5', '\x2', '\x2', '\x122', '\x126', '\a', '\x6', 
		'\x2', '\x2', '\x123', '\x126', '\a', '\b', '\x2', '\x2', '\x124', '\x126', 
		'\a', '\t', '\x2', '\x2', '\x125', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x122', '\x3', '\x2', '\x2', '\x2', '\x125', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\f', '\x3', '\x2', 
		'\x2', '\x128', '\x12A', '\a', '&', '\x2', '\x2', '\x129', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '+', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12F', '\a', '\x37', '\x2', '\x2', '\x12F', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\t', '\x2', '\x2', 
		'\x2', '\x131', '/', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x33', '<', 
		'G', 'N', 'k', 'w', '\x82', '\x8D', '\x98', '\xA3', '\xAF', '\xB1', '\xC3', 
		'\xC5', '\xD8', '\xDA', '\xE6', '\xE8', '\xF7', '\xF9', '\x102', '\x109', 
		'\x11B', '\x125', '\x12B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
