//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FStump.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FStumpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, LINE_COMMENT=3, FUNC=4, GOTO=5, CMP=6, TEST=7, NOP=8, 
		RETURN=9, LOCAL=10, ZERO=11, R1=12, R2=13, R3=14, RR=15, LR=16, SF=17, 
		PC=18, MUL=19, ASSIGN=20, ADD=21, ADD_ASSIGN=22, LSHIFT=23, LSHIFT_ASSIGN=24, 
		SUB=25, SUB_ASSIGN=26, LPAREN=27, RPAREN=28, LBRACE=29, RBRACE=30, LBRACK=31, 
		RBRACK=32, SEMI=33, COMMA=34, COLON=35, IDENTIFIER=36, DECIMAL_LITERAL=37, 
		HEX_LITERAL=38, OCT_LITERAL=39, BINARY_LITERAL=40, CHAR_LITERAL=41;
	public const int
		RULE_entry = 0, RULE_element = 1, RULE_globalDec = 2, RULE_function = 3, 
		RULE_functionArgs = 4, RULE_functionArg = 5, RULE_statement = 6, RULE_callArgs = 7, 
		RULE_callArg = 8, RULE_identifier = 9, RULE_register = 10, RULE_numberLiteral = 11;
	public static readonly string[] ruleNames = {
		"entry", "element", "globalDec", "function", "functionArgs", "functionArg", 
		"statement", "callArgs", "callArg", "identifier", "register", "numberLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'func'", "'goto'", "'cmp'", "'test'", "'nop'", 
		"'return'", "'local'", "'ZERO'", "'R1'", "'R2'", "'R3'", "'RR'", "'LR'", 
		"'SF'", "'PC'", "'*'", "'='", "'+'", "'+='", "'<<'", "'<<='", "'-'", "'-='", 
		"'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "LINE_COMMENT", "FUNC", "GOTO", "CMP", "TEST", 
		"NOP", "RETURN", "LOCAL", "ZERO", "R1", "R2", "R3", "RR", "LR", "SF", 
		"PC", "MUL", "ASSIGN", "ADD", "ADD_ASSIGN", "LSHIFT", "LSHIFT_ASSIGN", 
		"SUB", "SUB_ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
		"RBRACK", "SEMI", "COMMA", "COLON", "IDENTIFIER", "DECIMAL_LITERAL", "HEX_LITERAL", 
		"OCT_LITERAL", "BINARY_LITERAL", "CHAR_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FStump.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FStumpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FStumpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FStumpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class EntryContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(FStumpParser.Eof, 0); }
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public EntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry; } }
	}

	[RuleVersion(0)]
	public EntryContext entry() {
		EntryContext _localctx = new EntryContext(Context, State);
		EnterRule(_localctx, 0, RULE_entry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FUNC || _la==IDENTIFIER) {
				{
				{
				State = 24; element();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 30; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
	 
		public ElementContext() { }
		public virtual void CopyFrom(ElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionElementContext : ElementContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionElementContext(ElementContext context) { CopyFrom(context); }
	}
	public partial class GlobalDecElementContext : ElementContext {
		public GlobalDecContext globalDec() {
			return GetRuleContext<GlobalDecContext>(0);
		}
		public GlobalDecElementContext(ElementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_element);
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
				_localctx = new FunctionElementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 32; function();
				}
				break;
			case IDENTIFIER:
				_localctx = new GlobalDecElementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; globalDec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDecContext : ParserRuleContext {
		public GlobalDecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDec; } }
	 
		public GlobalDecContext() { }
		public virtual void CopyFrom(GlobalDecContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralGlobalDecContext : GlobalDecContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public LiteralGlobalDecContext(GlobalDecContext context) { CopyFrom(context); }
	}
	public partial class BlockGlobalDecContext : GlobalDecContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public ITerminalNode LBRACK() { return GetToken(FStumpParser.LBRACK, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public ITerminalNode RBRACK() { return GetToken(FStumpParser.RBRACK, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public BlockGlobalDecContext(GlobalDecContext context) { CopyFrom(context); }
	}
	public partial class ArrayGlobalDecContext : GlobalDecContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public ITerminalNode LBRACE() { return GetToken(FStumpParser.LBRACE, 0); }
		public NumberLiteralContext[] numberLiteral() {
			return GetRuleContexts<NumberLiteralContext>();
		}
		public NumberLiteralContext numberLiteral(int i) {
			return GetRuleContext<NumberLiteralContext>(i);
		}
		public ITerminalNode RBRACE() { return GetToken(FStumpParser.RBRACE, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FStumpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FStumpParser.COMMA, i);
		}
		public ArrayGlobalDecContext(GlobalDecContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public GlobalDecContext globalDec() {
		GlobalDecContext _localctx = new GlobalDecContext(Context, State);
		EnterRule(_localctx, 4, RULE_globalDec);
		int _la;
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new LiteralGlobalDecContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; identifier();
				State = 37; Match(ASSIGN);
				State = 38; numberLiteral();
				State = 39; Match(SEMI);
				}
				break;
			case 2:
				_localctx = new BlockGlobalDecContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; identifier();
				State = 42; Match(ASSIGN);
				State = 43; Match(LBRACK);
				State = 44; numberLiteral();
				State = 45; Match(RBRACK);
				State = 46; Match(SEMI);
				}
				break;
			case 3:
				_localctx = new ArrayGlobalDecContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 48; identifier();
				State = 49; Match(ASSIGN);
				State = 50; Match(LBRACE);
				State = 51; numberLiteral();
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 52; Match(COMMA);
					State = 53; numberLiteral();
					}
					}
					State = 58;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 59; Match(RBRACE);
				State = 60; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode FUNC() { return GetToken(FStumpParser.FUNC, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(FStumpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(FStumpParser.RPAREN, 0); }
		public ITerminalNode LBRACE() { return GetToken(FStumpParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(FStumpParser.RBRACE, 0); }
		public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(FUNC);
			State = 65; identifier();
			State = 66; Match(LPAREN);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 67; functionArgs();
				}
			}

			State = 70; Match(RPAREN);
			State = 71; Match(LBRACE);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GOTO) | (1L << CMP) | (1L << TEST) | (1L << NOP) | (1L << RETURN) | (1L << LOCAL) | (1L << ZERO) | (1L << R1) | (1L << R2) | (1L << R3) | (1L << RR) | (1L << LR) | (1L << SF) | (1L << PC) | (1L << MUL) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 72; statement();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgsContext : ParserRuleContext {
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FStumpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FStumpParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgs; } }
	}

	[RuleVersion(0)]
	public FunctionArgsContext functionArgs() {
		FunctionArgsContext _localctx = new FunctionArgsContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; functionArg();
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 81; Match(COMMA);
				State = 82; functionArg();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LshiftStatementContext : StatementContext {
		public RegisterContext dest;
		public RegisterContext left;
		public NumberLiteralContext right;
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public ITerminalNode[] LSHIFT() { return GetTokens(FStumpParser.LSHIFT); }
		public ITerminalNode LSHIFT(int i) {
			return GetToken(FStumpParser.LSHIFT, i);
		}
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext[] register() {
			return GetRuleContexts<RegisterContext>();
		}
		public RegisterContext register(int i) {
			return GetRuleContext<RegisterContext>(i);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public LshiftStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class LocalStatementContext : StatementContext {
		public ITerminalNode LOCAL() { return GetToken(FStumpParser.LOCAL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public LocalStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class LoadStatementContext : StatementContext {
		public RegisterContext dest;
		public IdentifierContext val;
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LoadStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class CmpLitStatementContext : StatementContext {
		public RegisterContext left;
		public NumberLiteralContext right;
		public ITerminalNode CMP() { return GetToken(FStumpParser.CMP, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public CmpLitStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class NopStatementContext : StatementContext {
		public ITerminalNode NOP() { return GetToken(FStumpParser.NOP, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public NopStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class StoreRegStatementContext : StatementContext {
		public RegisterContext dest;
		public RegisterContext src;
		public ITerminalNode MUL() { return GetToken(FStumpParser.MUL, 0); }
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext[] register() {
			return GetRuleContexts<RegisterContext>();
		}
		public RegisterContext register(int i) {
			return GetRuleContext<RegisterContext>(i);
		}
		public StoreRegStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class CallStatementContext : StatementContext {
		public RegisterContext target;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(FStumpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(FStumpParser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public CallArgsContext callArgs() {
			return GetRuleContext<CallArgsContext>(0);
		}
		public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		public CallStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ReturnStatementContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(FStumpParser.RETURN, 0); }
		public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class LabelStatementContext : StatementContext {
		public IdentifierContext name;
		public ITerminalNode COLON() { return GetToken(FStumpParser.COLON, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabelStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class GotoStatementContext : StatementContext {
		public IdentifierContext label;
		public ITerminalNode GOTO() { return GetToken(FStumpParser.GOTO, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GotoStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class TestRegStatementContext : StatementContext {
		public RegisterContext left;
		public RegisterContext right;
		public ITerminalNode TEST() { return GetToken(FStumpParser.TEST, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext[] register() {
			return GetRuleContexts<RegisterContext>();
		}
		public RegisterContext register(int i) {
			return GetRuleContext<RegisterContext>(i);
		}
		public TestRegStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class TestLitStatementContext : StatementContext {
		public RegisterContext left;
		public NumberLiteralContext right;
		public ITerminalNode TEST() { return GetToken(FStumpParser.TEST, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public TestLitStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class CmpRegStatementContext : StatementContext {
		public RegisterContext left;
		public RegisterContext right;
		public ITerminalNode CMP() { return GetToken(FStumpParser.CMP, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext[] register() {
			return GetRuleContexts<RegisterContext>();
		}
		public RegisterContext register(int i) {
			return GetRuleContext<RegisterContext>(i);
		}
		public CmpRegStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class AddAssignRegStatementContext : StatementContext {
		public RegisterContext dest;
		public RegisterContext val;
		public ITerminalNode ADD_ASSIGN() { return GetToken(FStumpParser.ADD_ASSIGN, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext[] register() {
			return GetRuleContexts<RegisterContext>();
		}
		public RegisterContext register(int i) {
			return GetRuleContext<RegisterContext>(i);
		}
		public AddAssignRegStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class SetStatementContext : StatementContext {
		public RegisterContext dest;
		public NumberLiteralContext val;
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public SetStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class AddAssignLitStatementContext : StatementContext {
		public RegisterContext dest;
		public NumberLiteralContext val;
		public ITerminalNode ADD_ASSIGN() { return GetToken(FStumpParser.ADD_ASSIGN, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public AddAssignLitStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class AddLitStatementContext : StatementContext {
		public RegisterContext dest;
		public RegisterContext left;
		public NumberLiteralContext right;
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public ITerminalNode ADD() { return GetToken(FStumpParser.ADD, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext[] register() {
			return GetRuleContexts<RegisterContext>();
		}
		public RegisterContext register(int i) {
			return GetRuleContext<RegisterContext>(i);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public AddLitStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class GotoCondStatementContext : StatementContext {
		public IdentifierContext cond;
		public IdentifierContext lab;
		public ITerminalNode GOTO() { return GetToken(FStumpParser.GOTO, 0); }
		public ITerminalNode LPAREN() { return GetToken(FStumpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(FStumpParser.RPAREN, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public GotoCondStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class AddRegStatementContext : StatementContext {
		public RegisterContext dest;
		public RegisterContext left;
		public RegisterContext right;
		public ITerminalNode ASSIGN() { return GetToken(FStumpParser.ASSIGN, 0); }
		public ITerminalNode ADD() { return GetToken(FStumpParser.ADD, 0); }
		public ITerminalNode SEMI() { return GetToken(FStumpParser.SEMI, 0); }
		public RegisterContext[] register() {
			return GetRuleContexts<RegisterContext>();
		}
		public RegisterContext register(int i) {
			return GetRuleContext<RegisterContext>(i);
		}
		public AddRegStatementContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new NopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; Match(NOP);
				State = 91; Match(SEMI);
				}
				break;
			case 2:
				_localctx = new LocalStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; Match(LOCAL);
				State = 93; identifier();
				State = 94; Match(SEMI);
				}
				break;
			case 3:
				_localctx = new LabelStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; ((LabelStatementContext)_localctx).name = identifier();
				State = 97; Match(COLON);
				}
				break;
			case 4:
				_localctx = new GotoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 99; Match(GOTO);
				State = 100; ((GotoStatementContext)_localctx).label = identifier();
				State = 101; Match(SEMI);
				}
				break;
			case 5:
				_localctx = new GotoCondStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 103; Match(GOTO);
				State = 104; Match(LPAREN);
				State = 105; ((GotoCondStatementContext)_localctx).cond = identifier();
				State = 106; Match(RPAREN);
				State = 107; ((GotoCondStatementContext)_localctx).lab = identifier();
				State = 108; Match(SEMI);
				}
				break;
			case 6:
				_localctx = new CmpRegStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 110; Match(CMP);
				State = 111; ((CmpRegStatementContext)_localctx).left = register();
				State = 112; ((CmpRegStatementContext)_localctx).right = register();
				State = 113; Match(SEMI);
				}
				break;
			case 7:
				_localctx = new CmpLitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 115; Match(CMP);
				State = 116; ((CmpLitStatementContext)_localctx).left = register();
				State = 117; ((CmpLitStatementContext)_localctx).right = numberLiteral();
				State = 118; Match(SEMI);
				}
				break;
			case 8:
				_localctx = new TestRegStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 120; Match(TEST);
				State = 121; ((TestRegStatementContext)_localctx).left = register();
				State = 122; ((TestRegStatementContext)_localctx).right = register();
				State = 123; Match(SEMI);
				}
				break;
			case 9:
				_localctx = new TestLitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 125; Match(TEST);
				State = 126; ((TestLitStatementContext)_localctx).left = register();
				State = 127; ((TestLitStatementContext)_localctx).right = numberLiteral();
				State = 128; Match(SEMI);
				}
				break;
			case 10:
				_localctx = new LoadStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 130; ((LoadStatementContext)_localctx).dest = register();
				State = 131; Match(ASSIGN);
				State = 132; ((LoadStatementContext)_localctx).val = identifier();
				State = 133; Match(SEMI);
				}
				break;
			case 11:
				_localctx = new SetStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 135; ((SetStatementContext)_localctx).dest = register();
				State = 136; Match(ASSIGN);
				State = 137; ((SetStatementContext)_localctx).val = numberLiteral();
				State = 138; Match(SEMI);
				}
				break;
			case 12:
				_localctx = new StoreRegStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 140; Match(MUL);
				State = 141; ((StoreRegStatementContext)_localctx).dest = register();
				State = 142; Match(ASSIGN);
				State = 143; ((StoreRegStatementContext)_localctx).src = register();
				State = 144; Match(SEMI);
				}
				break;
			case 13:
				_localctx = new LshiftStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 146; ((LshiftStatementContext)_localctx).dest = register();
				State = 147; Match(ASSIGN);
				State = 148; ((LshiftStatementContext)_localctx).left = register();
				State = 149; Match(LSHIFT);
				State = 150; ((LshiftStatementContext)_localctx).right = numberLiteral();
				State = 151; Match(SEMI);
				}
				break;
			case 14:
				_localctx = new LshiftStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 153; ((LshiftStatementContext)_localctx).dest = register();
				State = 154; Match(LSHIFT);
				State = 155; ((LshiftStatementContext)_localctx).left = register();
				State = 156; Match(LSHIFT);
				State = 157; ((LshiftStatementContext)_localctx).right = numberLiteral();
				State = 158; Match(SEMI);
				}
				break;
			case 15:
				_localctx = new AddRegStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 160; ((AddRegStatementContext)_localctx).dest = register();
				State = 161; Match(ASSIGN);
				State = 162; ((AddRegStatementContext)_localctx).left = register();
				State = 163; Match(ADD);
				State = 164; ((AddRegStatementContext)_localctx).right = register();
				State = 165; Match(SEMI);
				}
				break;
			case 16:
				_localctx = new AddAssignRegStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 167; ((AddAssignRegStatementContext)_localctx).dest = register();
				State = 168; Match(ADD_ASSIGN);
				State = 169; ((AddAssignRegStatementContext)_localctx).val = register();
				State = 170; Match(SEMI);
				}
				break;
			case 17:
				_localctx = new AddLitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 172; ((AddLitStatementContext)_localctx).dest = register();
				State = 173; Match(ASSIGN);
				State = 174; ((AddLitStatementContext)_localctx).left = register();
				State = 175; Match(ADD);
				State = 176; ((AddLitStatementContext)_localctx).right = numberLiteral();
				State = 177; Match(SEMI);
				}
				break;
			case 18:
				_localctx = new AddAssignLitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 179; ((AddAssignLitStatementContext)_localctx).dest = register();
				State = 180; Match(ADD_ASSIGN);
				State = 181; ((AddAssignLitStatementContext)_localctx).val = numberLiteral();
				State = 182; Match(SEMI);
				}
				break;
			case 19:
				_localctx = new CallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ZERO) | (1L << R1) | (1L << R2) | (1L << R3) | (1L << RR) | (1L << LR) | (1L << SF) | (1L << PC))) != 0)) {
					{
					State = 184; ((CallStatementContext)_localctx).target = register();
					State = 185; Match(ASSIGN);
					}
				}

				State = 189; identifier();
				State = 190; Match(LPAREN);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ZERO) | (1L << R1) | (1L << R2) | (1L << R3) | (1L << RR) | (1L << LR) | (1L << SF) | (1L << PC) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 191; callArgs();
					}
				}

				State = 194; Match(RPAREN);
				State = 195; Match(SEMI);
				}
				break;
			case 20:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 197; Match(RETURN);
				State = 198; register();
				State = 199; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgsContext : ParserRuleContext {
		public CallArgContext[] callArg() {
			return GetRuleContexts<CallArgContext>();
		}
		public CallArgContext callArg(int i) {
			return GetRuleContext<CallArgContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FStumpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FStumpParser.COMMA, i);
		}
		public CallArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArgs; } }
	}

	[RuleVersion(0)]
	public CallArgsContext callArgs() {
		CallArgsContext _localctx = new CallArgsContext(Context, State);
		EnterRule(_localctx, 14, RULE_callArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; callArg();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 204; Match(COMMA);
				State = 205; callArg();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallArgContext : ParserRuleContext {
		public CallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callArg; } }
	 
		public CallArgContext() { }
		public virtual void CopyFrom(CallArgContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RegCallArgContext : CallArgContext {
		public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		public RegCallArgContext(CallArgContext context) { CopyFrom(context); }
	}
	public partial class IdenCallArgContext : CallArgContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdenCallArgContext(CallArgContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public CallArgContext callArg() {
		CallArgContext _localctx = new CallArgContext(Context, State);
		EnterRule(_localctx, 16, RULE_callArg);
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new IdenCallArgContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 211; identifier();
				}
				break;
			case ZERO:
			case R1:
			case R2:
			case R3:
			case RR:
			case LR:
			case SF:
			case PC:
				_localctx = new RegCallArgContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; register();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FStumpParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegisterContext : ParserRuleContext {
		public RegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_register; } }
	 
		public RegisterContext() { }
		public virtual void CopyFrom(RegisterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ZeroRegisterContext : RegisterContext {
		public ITerminalNode ZERO() { return GetToken(FStumpParser.ZERO, 0); }
		public ZeroRegisterContext(RegisterContext context) { CopyFrom(context); }
	}
	public partial class LrRegisterContext : RegisterContext {
		public ITerminalNode LR() { return GetToken(FStumpParser.LR, 0); }
		public LrRegisterContext(RegisterContext context) { CopyFrom(context); }
	}
	public partial class R1RegisterContext : RegisterContext {
		public ITerminalNode R1() { return GetToken(FStumpParser.R1, 0); }
		public R1RegisterContext(RegisterContext context) { CopyFrom(context); }
	}
	public partial class RrRegisterContext : RegisterContext {
		public ITerminalNode RR() { return GetToken(FStumpParser.RR, 0); }
		public RrRegisterContext(RegisterContext context) { CopyFrom(context); }
	}
	public partial class PcRegisterContext : RegisterContext {
		public ITerminalNode PC() { return GetToken(FStumpParser.PC, 0); }
		public PcRegisterContext(RegisterContext context) { CopyFrom(context); }
	}
	public partial class R3RegisterContext : RegisterContext {
		public ITerminalNode R3() { return GetToken(FStumpParser.R3, 0); }
		public R3RegisterContext(RegisterContext context) { CopyFrom(context); }
	}
	public partial class R2RegisterContext : RegisterContext {
		public ITerminalNode R2() { return GetToken(FStumpParser.R2, 0); }
		public R2RegisterContext(RegisterContext context) { CopyFrom(context); }
	}
	public partial class SfRegisterContext : RegisterContext {
		public ITerminalNode SF() { return GetToken(FStumpParser.SF, 0); }
		public SfRegisterContext(RegisterContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public RegisterContext register() {
		RegisterContext _localctx = new RegisterContext(Context, State);
		EnterRule(_localctx, 20, RULE_register);
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO:
				_localctx = new ZeroRegisterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 217; Match(ZERO);
				}
				break;
			case R1:
				_localctx = new R1RegisterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 218; Match(R1);
				}
				break;
			case R2:
				_localctx = new R2RegisterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 219; Match(R2);
				}
				break;
			case R3:
				_localctx = new R3RegisterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 220; Match(R3);
				}
				break;
			case RR:
				_localctx = new RrRegisterContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 221; Match(RR);
				}
				break;
			case LR:
				_localctx = new LrRegisterContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 222; Match(LR);
				}
				break;
			case SF:
				_localctx = new SfRegisterContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 223; Match(SF);
				}
				break;
			case PC:
				_localctx = new PcRegisterContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 224; Match(PC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
	 
		public NumberLiteralContext() { }
		public virtual void CopyFrom(NumberLiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CharNumberLiteralContext : NumberLiteralContext {
		public ITerminalNode CHAR_LITERAL() { return GetToken(FStumpParser.CHAR_LITERAL, 0); }
		public CharNumberLiteralContext(NumberLiteralContext context) { CopyFrom(context); }
	}
	public partial class BinaryNumberLiteralContext : NumberLiteralContext {
		public ITerminalNode BINARY_LITERAL() { return GetToken(FStumpParser.BINARY_LITERAL, 0); }
		public BinaryNumberLiteralContext(NumberLiteralContext context) { CopyFrom(context); }
	}
	public partial class OctNumberLiteralContext : NumberLiteralContext {
		public ITerminalNode OCT_LITERAL() { return GetToken(FStumpParser.OCT_LITERAL, 0); }
		public OctNumberLiteralContext(NumberLiteralContext context) { CopyFrom(context); }
	}
	public partial class HexNumberLiteralContext : NumberLiteralContext {
		public ITerminalNode HEX_LITERAL() { return GetToken(FStumpParser.HEX_LITERAL, 0); }
		public HexNumberLiteralContext(NumberLiteralContext context) { CopyFrom(context); }
	}
	public partial class DecimalNumberLiteralContext : NumberLiteralContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(FStumpParser.DECIMAL_LITERAL, 0); }
		public DecimalNumberLiteralContext(NumberLiteralContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 22, RULE_numberLiteral);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
				_localctx = new DecimalNumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 227; Match(DECIMAL_LITERAL);
				}
				break;
			case HEX_LITERAL:
				_localctx = new HexNumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(HEX_LITERAL);
				}
				break;
			case OCT_LITERAL:
				_localctx = new OctNumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 229; Match(OCT_LITERAL);
				}
				break;
			case BINARY_LITERAL:
				_localctx = new BinaryNumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 230; Match(BINARY_LITERAL);
				}
				break;
			case CHAR_LITERAL:
				_localctx = new CharNumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 231; Match(CHAR_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\xED', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\a', 
		'\x2', '\x1C', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1F', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'%', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x39', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '<', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x41', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'G', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'L', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', 'O', '\v', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'V', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'Y', '\v', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xBE', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xC3', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xCC', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xD1', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\xD4', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xD8', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\xE4', '\n', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xEB', '\n', '\r', 
		'\x3', '\r', '\x2', '\x2', '\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x2', '\x2', '\x2', '\x10A', 
		'\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x4', '$', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '@', '\x3', '\x2', '\x2', '\x2', '\b', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'R', '\x3', '\x2', '\x2', '\x2', '\f', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\x12', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x16', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1C', '\x5', '\x4', '\x3', '\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', ' ', '!', '\a', '\x2', '\x2', '\x3', '!', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\"', '%', '\x5', '\b', '\x5', '\x2', '#', '%', '\x5', '\x6', 
		'\x4', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '$', '#', '\x3', 
		'\x2', '\x2', '\x2', '%', '\x5', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\x5', '\x14', '\v', '\x2', '\'', '(', '\a', '\x16', '\x2', '\x2', '(', 
		')', '\x5', '\x18', '\r', '\x2', ')', '*', '\a', '#', '\x2', '\x2', '*', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x5', '\x14', '\v', '\x2', 
		',', '-', '\a', '\x16', '\x2', '\x2', '-', '.', '\a', '!', '\x2', '\x2', 
		'.', '/', '\x5', '\x18', '\r', '\x2', '/', '\x30', '\a', '\"', '\x2', 
		'\x2', '\x30', '\x31', '\a', '#', '\x2', '\x2', '\x31', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\x5', '\x14', '\v', '\x2', '\x33', 
		'\x34', '\a', '\x16', '\x2', '\x2', '\x34', '\x35', '\a', '\x1F', '\x2', 
		'\x2', '\x35', ':', '\x5', '\x18', '\r', '\x2', '\x36', '\x37', '\a', 
		'$', '\x2', '\x2', '\x37', '\x39', '\x5', '\x18', '\r', '\x2', '\x38', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x39', '<', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', 
		'\x2', '\x2', ';', '=', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\a', ' ', '\x2', '\x2', '>', '?', '\a', '#', 
		'\x2', '\x2', '?', '\x41', '\x3', '\x2', '\x2', '\x2', '@', '&', '\x3', 
		'\x2', '\x2', '\x2', '@', '+', '\x3', '\x2', '\x2', '\x2', '@', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x43', '\a', '\x6', '\x2', '\x2', '\x43', '\x44', '\x5', '\x14', 
		'\v', '\x2', '\x44', '\x46', '\a', '\x1D', '\x2', '\x2', '\x45', 'G', 
		'\x5', '\n', '\x6', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'I', '\a', '\x1E', '\x2', '\x2', 'I', 'M', '\a', '\x1F', '\x2', 
		'\x2', 'J', 'L', '\x5', '\xE', '\b', '\x2', 'K', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', ' ', '\x2', 
		'\x2', 'Q', '\t', '\x3', '\x2', '\x2', '\x2', 'R', 'W', '\x5', '\f', '\a', 
		'\x2', 'S', 'T', '\a', '$', '\x2', '\x2', 'T', 'V', '\x5', '\f', '\a', 
		'\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'X', '\v', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\x5', '\x14', '\v', '\x2', '[', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\a', '\n', '\x2', '\x2', ']', '\xCC', 
		'\a', '#', '\x2', '\x2', '^', '_', '\a', '\f', '\x2', '\x2', '_', '`', 
		'\x5', '\x14', '\v', '\x2', '`', '\x61', '\a', '#', '\x2', '\x2', '\x61', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x5', '\x14', '\v', 
		'\x2', '\x63', '\x64', '\a', '%', '\x2', '\x2', '\x64', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\a', '\x2', '\x2', '\x66', 
		'g', '\x5', '\x14', '\v', '\x2', 'g', 'h', '\a', '#', '\x2', '\x2', 'h', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\a', '\x2', '\x2', 
		'j', 'k', '\a', '\x1D', '\x2', '\x2', 'k', 'l', '\x5', '\x14', '\v', '\x2', 
		'l', 'm', '\a', '\x1E', '\x2', '\x2', 'm', 'n', '\x5', '\x14', '\v', '\x2', 
		'n', 'o', '\a', '#', '\x2', '\x2', 'o', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\a', '\b', '\x2', '\x2', 'q', 'r', '\x5', '\x16', '\f', '\x2', 
		'r', 's', '\x5', '\x16', '\f', '\x2', 's', 't', '\a', '#', '\x2', '\x2', 
		't', '\xCC', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\b', '\x2', 
		'\x2', 'v', 'w', '\x5', '\x16', '\f', '\x2', 'w', 'x', '\x5', '\x18', 
		'\r', '\x2', 'x', 'y', '\a', '#', '\x2', '\x2', 'y', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\a', '\t', '\x2', '\x2', '{', '|', '\x5', '\x16', 
		'\f', '\x2', '|', '}', '\x5', '\x16', '\f', '\x2', '}', '~', '\a', '#', 
		'\x2', '\x2', '~', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '\t', '\x2', '\x2', '\x80', '\x81', '\x5', '\x16', '\f', '\x2', 
		'\x81', '\x82', '\x5', '\x18', '\r', '\x2', '\x82', '\x83', '\a', '#', 
		'\x2', '\x2', '\x83', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\x5', '\x16', '\f', '\x2', '\x85', '\x86', '\a', '\x16', '\x2', '\x2', 
		'\x86', '\x87', '\x5', '\x14', '\v', '\x2', '\x87', '\x88', '\a', '#', 
		'\x2', '\x2', '\x88', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', 
		'\x5', '\x16', '\f', '\x2', '\x8A', '\x8B', '\a', '\x16', '\x2', '\x2', 
		'\x8B', '\x8C', '\x5', '\x18', '\r', '\x2', '\x8C', '\x8D', '\a', '#', 
		'\x2', '\x2', '\x8D', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\a', '\x15', '\x2', '\x2', '\x8F', '\x90', '\x5', '\x16', '\f', '\x2', 
		'\x90', '\x91', '\a', '\x16', '\x2', '\x2', '\x91', '\x92', '\x5', '\x16', 
		'\f', '\x2', '\x92', '\x93', '\a', '#', '\x2', '\x2', '\x93', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x5', '\x16', '\f', '\x2', 
		'\x95', '\x96', '\a', '\x16', '\x2', '\x2', '\x96', '\x97', '\x5', '\x16', 
		'\f', '\x2', '\x97', '\x98', '\a', '\x19', '\x2', '\x2', '\x98', '\x99', 
		'\x5', '\x18', '\r', '\x2', '\x99', '\x9A', '\a', '#', '\x2', '\x2', '\x9A', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\x16', '\f', 
		'\x2', '\x9C', '\x9D', '\a', '\x19', '\x2', '\x2', '\x9D', '\x9E', '\x5', 
		'\x16', '\f', '\x2', '\x9E', '\x9F', '\a', '\x19', '\x2', '\x2', '\x9F', 
		'\xA0', '\x5', '\x18', '\r', '\x2', '\xA0', '\xA1', '\a', '#', '\x2', 
		'\x2', '\xA1', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x5', 
		'\x16', '\f', '\x2', '\xA3', '\xA4', '\a', '\x16', '\x2', '\x2', '\xA4', 
		'\xA5', '\x5', '\x16', '\f', '\x2', '\xA5', '\xA6', '\a', '\x17', '\x2', 
		'\x2', '\xA6', '\xA7', '\x5', '\x16', '\f', '\x2', '\xA7', '\xA8', '\a', 
		'#', '\x2', '\x2', '\xA8', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAA', '\x5', '\x16', '\f', '\x2', '\xAA', '\xAB', '\a', '\x18', '\x2', 
		'\x2', '\xAB', '\xAC', '\x5', '\x16', '\f', '\x2', '\xAC', '\xAD', '\a', 
		'#', '\x2', '\x2', '\xAD', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAF', '\x5', '\x16', '\f', '\x2', '\xAF', '\xB0', '\a', '\x16', '\x2', 
		'\x2', '\xB0', '\xB1', '\x5', '\x16', '\f', '\x2', '\xB1', '\xB2', '\a', 
		'\x17', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x18', '\r', '\x2', '\xB3', 
		'\xB4', '\a', '#', '\x2', '\x2', '\xB4', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB6', '\x5', '\x16', '\f', '\x2', '\xB6', '\xB7', '\a', 
		'\x18', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\x18', '\r', '\x2', '\xB8', 
		'\xB9', '\a', '#', '\x2', '\x2', '\xB9', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBB', '\x5', '\x16', '\f', '\x2', '\xBB', '\xBC', '\a', 
		'\x16', '\x2', '\x2', '\xBC', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x5', 
		'\x14', '\v', '\x2', '\xC0', '\xC2', '\a', '\x1D', '\x2', '\x2', '\xC1', 
		'\xC3', '\x5', '\x10', '\t', '\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x1E', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '#', '\x2', '\x2', '\xC6', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\a', '\v', '\x2', '\x2', '\xC8', '\xC9', '\x5', 
		'\x16', '\f', '\x2', '\xC9', '\xCA', '\a', '#', '\x2', '\x2', '\xCA', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCB', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '^', '\x3', '\x2', '\x2', '\x2', '\xCB', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\x65', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'i', '\x3', '\x2', '\x2', '\x2', '\xCB', 'p', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', 'u', '\x3', '\x2', '\x2', '\x2', '\xCB', 'z', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\x7F', '\x3', '\x2', '\x2', '\x2', '\xCB', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\x89', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\xCB', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xF', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xD2', '\x5', '\x12', '\n', '\x2', '\xCE', '\xCF', '\a', '$', '\x2', 
		'\x2', '\xCF', '\xD1', '\x5', '\x12', '\n', '\x2', '\xD0', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\x11', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD8', '\x5', '\x14', '\v', '\x2', '\xD6', 
		'\xD8', '\x5', '\x16', '\f', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', '&', '\x2', '\x2', '\xDA', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xE4', '\a', '\r', '\x2', 
		'\x2', '\xDC', '\xE4', '\a', '\xE', '\x2', '\x2', '\xDD', '\xE4', '\a', 
		'\xF', '\x2', '\x2', '\xDE', '\xE4', '\a', '\x10', '\x2', '\x2', '\xDF', 
		'\xE4', '\a', '\x11', '\x2', '\x2', '\xE0', '\xE4', '\a', '\x12', '\x2', 
		'\x2', '\xE1', '\xE4', '\a', '\x13', '\x2', '\x2', '\xE2', '\xE4', '\a', 
		'\x14', '\x2', '\x2', '\xE3', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\x17', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xEB', '\a', 
		'\'', '\x2', '\x2', '\xE6', '\xEB', '\a', '(', '\x2', '\x2', '\xE7', '\xEB', 
		'\a', ')', '\x2', '\x2', '\xE8', '\xEB', '\a', '*', '\x2', '\x2', '\xE9', 
		'\xEB', '\a', '+', '\x2', '\x2', '\xEA', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x1D', '$', ':', '@', '\x46', 'M', 'W', '\xBD', '\xC2', 
		'\xCB', '\xD2', '\xD7', '\xE3', '\xEA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
